#include "Mesh_Statistics.hh"

#include "InformationSystemManager.hh"
#include "SimpleSpheroidalCell.hh"
#include "StatsDataEmitter.hh"

#include <fstream>	// needed to call the << operator on ofstream

namespace Statistics {

/// \param pCells The cells we want to export the stats for
/// \param pFormat The mesh format we want the stats for (needed bacause can changed from a format to an other
/// 						(specially external format, the one we dont keep a copy for, cf Geant4) )
/// \param pCellOut The stats output target for cell
/// \param pNucleiOut The stats output target for cell nuclei
/// \warning this data exporter start from principal that each cell will export the same type of data ( == all cells are the same type : spheroidal...)
/// \return True if sucess
bool generateMeshStats(std::vector<const t_Cell_3*> pCells, MeshOutFormats::outputFormat pFormat, std::ofstream* pCellOut, std::ofstream* pNucleiOut) {
	if(pCells.size() == 0)
		return true;

	if(pFormat > MeshOutFormats::Unknow) {
		InformationSystemManager::getInstance()->Message(
			InformationSystemManager::CANT_PROCESS_MES,
			"Unvalid mesh format to export mesh statistics for",
			"Statitstics::generateMeshStats"
		);
		return false;
	}

	/// write cell header
	if(pCellOut) {
		writeCellStatsHeader(pFormat, pCellOut);
		*pCellOut << "###" << (*pCells.begin())->writeStatsHeader() << "\tcellMeshVolume\tcytoplasmMeshVolume" << std::endl;
	}

	/// write cell nuclei header
	if(pNucleiOut) {
		writeCellNucleiStatsHeader(pFormat, pNucleiOut);
		if(dynamic_cast<const SimpleSpheroidalCell*>(*pCells.begin()))
			*pNucleiOut << "###" << "CellID\t" << dynamic_cast<const SimpleSpheroidalCell*>(*pCells.begin())->getNucleus()->writeStatsHeader() << "\tmeshVolume" << std::endl;
	}

	/// then write statistic for cell and is nucleus
	for(auto const& pCell : pCells) {
		assert(pCell);
		// print cell mesh stats
		if(pCellOut) {
			*pCellOut << pCell->addStatsData()  << "\t"
				// cell volume mesh
				<< pCell->getMeshVolume(pFormat) << "\t"; // add the volume here because is dependant of the mesh type
		}

		unsigned long int lID = pCell->getID();
		auto const& nuclei = pCell->getNuclei();

		double nucleiVolume = 0.;

		for(auto const& itNucleus : nuclei) {
			// print nuclei mesh stats
			if(pNucleiOut) {
				*pNucleiOut	<< lID << "\t"
					<< itNucleus->addStatsData() << "\t"
					<< itNucleus->getMeshVolume(pFormat) << std::endl;
			}

			nucleiVolume += itNucleus->getMeshVolume(pFormat);
		}

		if(pCellOut) {
			// cytoplasm mesh volume - nuclei mesh volume
			*pCellOut << ( pCell->getMeshVolume(pFormat) - nucleiVolume ) << std::endl;
		}
	}

	return true;
}

/// \param pFormat the format for which we want to export stats
/// \param pOut where to redirect statistics
void writeCellStatsHeader(MeshOutFormats::outputFormat pFormat, std::ofstream* pOut) {
	*pOut << "### file generated by cpop for cell meshes statistics. Unit is micro meter. Mesh format is : " << getFormatName(pFormat).toStdString() << "### \n";
}

/// \param pFormat the format for which we want to export stats
/// \param pOut where to redirect statistics
void writeCellNucleiStatsHeader(MeshOutFormats::outputFormat pFormat, std::ofstream* pOut) {
	*pOut << "### file generated by cpop for cell Nuclei meshes statistics. Unit is micro meter. Mesh format is : " << getFormatName(pFormat).toStdString() << "### \n";
}

}
